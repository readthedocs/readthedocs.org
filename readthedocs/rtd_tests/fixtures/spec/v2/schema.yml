# Read the Docs configuration file
# This schema uses https://github.com/23andMe/Yamale
# for the validation.
# Default values are indicated with a comment (``Default: ...``).
# Some values are default to the project config (settings from the web panel).

# The version of the spec to be use
version: enum('2')

# Formats of the documentation to be built
# Default: []
formats: any(list(enum('htmlzip', 'pdf', 'epub')), enum('all'), required=False)

# Configuration for Conda support
conda: include('conda', required=False)

# Configuration for the documentation build process
build: include('build', required=False)

# Configuration of the Python environment to be used
python: include('python', required=False)

# Configuration for sphinx documentation
# Default documentation type
sphinx: include('sphinx', required=False)

# Configuration for mkdocs documentation
mkdocs: include('mkdocs', required=False)

# Submodules configuration
submodules: include('submodules', required=False)

# Redirects for the current version to be built
# Key/value list, represent redirects of type `type`
# from url -> to url
# Default: null
redirects: map(enum('page'), map(str(), str()), required=False)

---

conda:
  # The path to the Conda environment file from the root of the project
  environment: path()

build:
  # The build docker image to be used
  # Default: 'latest'
  # Note: it can be overriden by a project
  image: enum('stable', 'latest', required=False)

python:
  # The Python version (this depends on the build image)
  # Default: '3'
  version: enum('2', '2.7', '3', '3.3', '3.4', '3.5', '3.6', required=False)

  # Give the virtual environment access to the global site-packages dir
  # Default: false | project config
  system_packages: bool(required=False)

  # Installation of packages and requiremens
  install: list(any(include('python-install-requirements'), include('python-install'), include('python-install-pipfile')), required=False)

python-install-requirements:
  # The path to the requirements file from the root of the project
  requirements: path()

python-install:
  # The path to the project to be installed
  path: path()

  # Install using python setup.py install or pip
  # Default: pip
  method: enum('pip', 'setuptools', required=False)

  # Extra requirements sections to install in addition to the package dependencies.
  # Only valid when `method` is `pip`.
  # Default: []
  extra_requirements: list(str(), required=False)

python-install-pipfile:
  # The path to the directory that contains the Pipfile
  pipfile: path()

  # Add the --dev option to pipenv install
  # Default: false
  dev: bool(required=False)

  # Add the --ignore-pipfile option to pipenv install
  # Default: false
  ignore_pipfile: bool(required=False)

  # Add the --skip-lock option to pipenv install
  # Default: true
  skip_lock: bool(required=False)

sphinx:
  # The builder type for the sphinx documentation
  # Default: 'html'
  builder: enum('html', 'htmldir', 'singlehtml', required=False)

  # The path to the conf.py file
  # Default: rtd will try to find it | project config
  configuration: path(required=False)

  # Add the -W option to sphinx-build
  # Default: false
  fail_on_warning: bool(required=False)

mkdocs:
  # The path to the mkdocs.yml file
  # Default: rtd will try to find it
  configuration: path(required=False)

  # Add the --strict optio to mkdocs build
  # Default: false
  fail_on_warning: bool(required=False)

submodules:
  # List of submodules to be included
  # Default: []
  include: any(list(str()), enum('all'), required=False)

  # List of submodules to be ignored
  # Default: []
  exclude: any(list(str()), enum('all'), required=False)
  
  # Do a recursive clone?
  # Default: false
  recursive: bool(required=False)
