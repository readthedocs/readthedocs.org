# Proxito
server {
    listen 80 default_server;
    server_name $NGINX_PROXITO_SERVER_NAME;

    # Docker Compose's "logging.driver: none" is not working anymore.
    # So, we are disabling the logs from NGINX directly.
    access_log off;

    # TODO: serve the favicon.ico from the project/version itself instead
    location /favicon.ico {
        proxy_pass http://storage:9000/static/images/favicon.ico;
        break;
    }

    # Redirect old URLs to our new domain
    # external-builds.readthedocs.io/<type>/<slug>/<pr-number>/
    location  ~* ^/html/(?P<project>.+)/(?P<version>.+)/(?P<path>.*) {
        add_header X-Served Nginx-External-Redirect always;
        rewrite ^ http://$project--$version.org.dev.readthedocs.build/page/$path;
    }

    # Proxito doc serving
    location / {
        proxy_pass http://proxito:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;

        proxy_intercept_errors on;
        error_page 404 = @notfoundfallback;

        add_header X-Served Django-Proxito always;
    }

    # Sendfile support to serve the actual files that Proxito has specified
    location ~* "^/(proxito|proxito-static)/(.+)" {
        internal;
        # Nginx will strip the `/proxito/` and pass just the `$storage/$type/$proj/$ver/$filename`
        proxy_pass http://storage:9000/$2;

        proxy_set_header Host storage:9000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;

        proxy_intercept_errors on;
        error_page 404 = @notfoundfallback;

        # Nginx is silly, so we have to *set* these then use them.
        # Using them directly gets the values from the storage upstream.
        # I think the `set` must get read before doing the proxy_pass
        # but the `add_header` is read after
        set $rtd_project $upstream_http_x_rtd_project;
        add_header X-RTD-Project $rtd_project always;
        set $rtd_version $upstream_http_x_rtd_version;
        add_header X-RTD-Version $rtd_version always;
        set $rtd_path $upstream_http_x_rtd_path;
        add_header X-RTD-Path $rtd_path always;
        set $rtd_domain $upstream_http_x_rtd_domain;
        add_header X-RTD-Domain $rtd_domain always;
        set $rtd_version_method $upstream_http_x_rtd_version_method;
        add_header X-RTD-Version-Method $rtd_version_method always;
        set $rtd_project_method $upstream_http_x_rtd_project_method;
        add_header X-RTD-Project-Method $rtd_project_method always;
        set $rtd_redirect $upstream_http_x_rtd_redirect;
        add_header X-RTD-Redirect $rtd_redirect always;
        set $cdn_cache_control $upstream_http_cdn_cache_control;
        add_header CDN-Cache-Control $cdn_cache_control always;
        set $cache_tag $upstream_http_cache_tag;
        add_header Cache-Tag $cache_tag always;
        set $referrer_policy $upstream_http_referrer_policy;
        add_header Referrer-Policy $referrer_policy always;
        set $permissions_policy $upstream_http_permissions_policy;
        add_header Permissions-Policy $permissions_policy always;
        set $feature_policy $upstream_http_feature_policy;
        add_header Feature-Policy $feature_policy always;

        # CORS headers.
        # Minio sets these headers, and we don't want to copy
        # them to the response, since our application sets them.
        proxy_hide_header Access-Control-Allow-Credentials;
        proxy_hide_header Access-Control-Expose-Headers;

        proxy_hide_header Access-Control-Allow-Origin;
        set $access_control_allow_origin $upstream_http_access_control_allow_origin;
        add_header Access-Control-Allow-Origin $access_control_allow_origin always;

        proxy_hide_header Access-Control-Allow-Headers;
        set $access_control_allow_headers $upstream_http_access_control_allow_headers;
        add_header Access-Control-Allow-Headers $access_control_allow_headers always;

        proxy_hide_header Access-Control-Allow-Methods;
        set $access_control_allow_methods $upstream_http_access_control_allow_methods;
        add_header Access-Control-Allow-Methods $access_control_allow_methods always;

        set $x_frame_options $upstream_http_x_frame_options;
        add_header X-Frame-Options $x_frame_options always;
        set $x_content_type_options $upstream_http_x_content_type_options;
        add_header X-Content-Type-Options $x_content_type_options always;
        # Minio sets this header on the response, and we don't want to copy it to the response
        proxy_hide_header Content-Security-Policy;
        set $content_security_policy $upstream_http_content_security_policy;
        add_header Content-Security-Policy $content_security_policy always;

        # This header allows us to decide whether or not inject the script at CloudFlare level
        # Now, I'm injecting it in all the NGINX responses because `sub_filter` is not allowed inside an `if` statement.
        set $rtd_hosting_integrations $upstream_http_x_rtd_hosting_integrations;
        add_header X-RTD-Hosting-Integrations $rtd_hosting_integrations always;
        set $rtd_force_addons $upstream_http_x_rtd_force_addons;
        add_header X-RTD-Force-Addons $rtd_force_addons always;

        # Inject our own script dynamically and project/version slugs into the HTML to emulate what CF worker does
        # TODO: find a way to make this work _without_ running `npm run dev` from the `addons` repository
        sub_filter '</head>' '<script async language="javascript" src="http://localhost:8000/readthedocs-addons.js"></script>\n<meta name="readthedocs-project-slug" content="$rtd_project" />\n<meta name="readthedocs-version-slug" content="$rtd_version" />\n</head>';
        sub_filter_types text/html;
        sub_filter_last_modified on;
        sub_filter_once on;
    }

    # Serve 404 pages here
    location @notfoundfallback {
        proxy_pass http://proxito:8000/_proxito_404_$request_uri;

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        add_header X-Served Proxito-404-Fallback always;
    }

}
